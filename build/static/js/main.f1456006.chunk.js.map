{"version":3,"sources":["components/logo/Logo.js","components/footer/Footer.js","config.js","components/searchForm/SearchForm.js","components/Statsbar/Statsbar.js","components/SearchResult/SearchResult.js","components/SearchResults/SearchResults.js","App.js","reportWebVitals.js","index.js"],"names":["Logo","className","aria-hidden","Footer","href","target","rel","settings","prepareWikiUrl","searchText","characters","error","SearchForm","setSearchResultsHandler","setSearchResultsLoadingHandler","useState","setSearchText","fetchSearchResultsHandler","useCallback","a","wikiUrl","fetch","rawResults","json","results","console","log","fetchSearchResults","onSubmit","e","preventDefault","type","autoComplete","value","onChange","Statsbar","totalResults","SearchResult","result","pageid","title","thumbnail","source","src","alt","extract","SearchResults","searchResults","isSearchResultsLoading","preparedResults","setPreparedResults","useEffect","preparedResultsArr","query","pages","keys","Object","length","key","push","map","index","App","setSearchResults","setSearchResultsLoading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1456006.chunk.js","sourcesContent":["import './Logo.css';\n\nexport function Logo(){\n    return (\n        <section className=\"logo-container\">\n          <div className=\"logo\" aria-hidden=\"true\">\n          <span className=\"blue\">Search</span>\n                <span className=\"red\">With</span>\n                <span className=\"yellow\">Jatin</span>\n                <span className=\"green exclaim\">!</span>\n          </div>\n        </section>\n      );\n}","import './Footer.css';\n\nexport function Footer(){\n    return (\n        <footer>\n            <p><span aria-hidden=\"true\">&lt;&lt;</span> Powered by <a href=\"https://www.wikipedia.org\" target=\"_blank\" rel=\"noreferrer\">Wikipedia</a> <span aria-hidden=\"true\">&gt;&gt;</span></p>\n        </footer>\n      );\n}","export const settings = {\n    limit: 20,\n};\n\nexport const prepareWikiUrl = (searchText, characters) => {\n    try {\n        return `https://en.wikipedia.org/w/api.php?action=query&generator=search&gsrsearch=${searchText}&gsrlimit=${settings.limit}&prop=pageimages|extracts&exchars=${characters}&exintro&explaintext&exlimit=max&format=json&origin=*`;\n    } catch (error) {\n        throw error;\n    }\n}","import React, { useState, useCallback } from 'react';\nimport {FaSistrix} from 'react-icons/fa';\n\nimport './SearchForm.css';\nimport {prepareWikiUrl} from '../../config';\n\n\nexport const SearchForm = ({setSearchResultsHandler, setSearchResultsLoadingHandler}) => {\n    const [searchText, setSearchText] = useState('');\n\n    const fetchSearchResultsHandler = useCallback(() => {\n        //definations\n        const fetchSearchResults = async () => {\n            try {\n                //loading ON\n                setSearchResultsLoadingHandler(true);\n\n                // call the wikipedia API and fetch results\n                const wikiUrl = prepareWikiUrl(searchText, 100);\n                // call the API\n                const rawResults = await fetch(wikiUrl);\n                const results = await rawResults.json();\n                // caling the parent function\n                setSearchResultsHandler(results);\n\n                //loading OFFF\n                setSearchResultsLoadingHandler(false);\n            } catch (error) {\n                //loading OFFF\n                setSearchResultsLoadingHandler(false);\n                console.log(error);\n            }\n        }//EOF\n\n        // call the function to fetch results\n        fetchSearchResults();\n    }, [searchText, setSearchResultsHandler, setSearchResultsLoadingHandler]);\n\n    console.log('SearchForm rendered');\n\n    return (\n        <section className=\"search-bar-container\">\n            <form className=\"form\" onSubmit={(e) => { e.preventDefault(); fetchSearchResultsHandler(); }}>\n                <input type=\"text\" autoComplete=\"off\" className=\"search-bar\" value={searchText} onChange={(e) => { setSearchText(e.target.value); }\n            } />\n                <button type=\"submit\" className=\"search-button\">\n                    <i className=\"blue pointer\"><FaSistrix /></i>\n                </button>\n            </form>\n        </section>\n    );\n}","import './Statsbar.css';\n\n\nexport const Statsbar = ({ totalResults }) => {\n    return (\n        <div className=\"stats-bar-container\">\n            <span>Displaying <strong>{totalResults}</strong> results.</span>\n        </div>\n    );\n}","import './SearchResult.css';\n\n\nexport const SearchResult = ({result}) => {\n    return (\n        <div className=\"search-results-item\" key={result.pageid}>\n            <div className=\"search-results-title\">\n                <a href={`https://en.wikipedia.org/?curid=${result.pageid}`} target=\"_blank\" rel=\"noreferrer\">{result.title}</a>\n            </div>\n            <div className=\"search-results-content\">\n                {\n                    (result?.thumbnail?.source) &&\n                        (\n                            <div className=\"search-results-image\">\n                                <img src={result.thumbnail.source} alt={result.title} />\n                            </div>\n                        )\n                }\n                <div className=\"search-results-text\">\n                    {result.extract}\n                </div>\n            </div>\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\n\nimport './SearchResults.css';\nimport {Statsbar} from '../Statsbar/Statsbar';\nimport {SearchResult} from '../SearchResult/SearchResult';\n\n\nexport const SearchResults = ({searchResults, isSearchResultsLoading}) => {\n    const [preparedResults, setPreparedResults] = useState([]);\n\n    useEffect(() => {\n        const preparedResultsArr = [];\n        // checking if the key is there\n        if(searchResults?.query?.pages && typeof searchResults.query.pages === 'object'){\n            const keys = Object.keys(searchResults.query.pages);\n\n            // if we got results or not...\n            if(keys.length > 0){\n                for(const key of keys){\n                    preparedResultsArr.push(searchResults.query.pages[key]);\n                }//EOL\n                setPreparedResults(preparedResultsArr);\n            }//EOI\n        }//EOI\n    }, [searchResults]);\n    console.log('SearchResults rendered');\n    \n    return (\n        <section className=\"search-results-container\">\n            {\n                isSearchResultsLoading \n                ?  (<span>loading...</span>)\n                : (<> \n                <Statsbar totalResults={preparedResults.length} />\n                {\n                    (preparedResults.length > 0) &&\n                    preparedResults.map((result, index) => {\n                        return (\n                            <SearchResult key={index} result={result} />\n                        )\n                    })\n                }\n                </>)\n            }\n        </section>\n    );\n}","import React, { useState } from 'react';\n\nimport './App.css';\nimport {Logo} from './components/logo/Logo';\nimport {Footer} from './components/footer/Footer';\nimport { SearchForm } from './components/searchForm/SearchForm';\nimport {SearchResults as SearchResultsComp} from './components/SearchResults/SearchResults';\n\nfunction App() {\n  const [searchResults, setSearchResults] = useState({});\n  const [isSearchResultsLoading, setSearchResultsLoading] = useState(false);\n\n  return (\n    <main>\n      <Logo />\n      <SearchForm setSearchResultsHandler={setSearchResults} setSearchResultsLoadingHandler={setSearchResultsLoading} />\n      <SearchResultsComp searchResults={searchResults} isSearchResultsLoading={isSearchResultsLoading} />\n      <Footer />\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}